<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IPFS File Upload in DApp</title>
    <script src="https://cdn.jsdelivr.net/npm/web3@1.6.1/dist/web3.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/ipfs-http-client/dist/index.min.js"></script>
</head>
<body>
    <h1>IPFS File Upload</h1>
    
    <!-- File upload form -->
    <input type="file" id="fileUpload" />
    <button onclick="uploadFile()">Upload File</button>
    
    <div id="ipfsHash"></div>
    
    <script>
        // Initialize IPFS client
        const ipfs = IpfsHttpClient.create({ url: 'https://ipfs.infura.io:5001/api/v0' });

        // Initialize Web3 and check for MetaMask
        let web3;
        let userAccount;
        
        // Check if MetaMask is available
        if (window.ethereum) {
            web3 = new Web3(window.ethereum);
            window.ethereum.enable().then(accounts => {
                userAccount = accounts[0];
            }).catch(err => {
                console.error("User denied account access", err);
            });
        } else {
            alert("MetaMask not detected. Please install MetaMask to use this DApp.");
        }

        // Handle file upload to IPFS
        async function uploadFile() {
            const file = document.getElementById('fileUpload').files[0];
            if (!file) {
                alert("Please select a file to upload.");
                return;
            }

            try {
                // Upload to IPFS
                const added = await ipfs.add(file);
                const fileHash = added.path;  // The unique IPFS hash
                console.log('File uploaded to IPFS:', fileHash);

                // Display the IPFS hash
                document.getElementById('ipfsHash').innerHTML = `
                    File uploaded successfully!<br>
                    IPFS Hash: <a href="https://ipfs.infura.io/ipfs/${fileHash}" target="_blank">${fileHash}</a>
                `;

                // Optional: Interact with smart contract to store the IPFS hash
                // Uncomment the following lines if you have a contract to store the hash
                // await storeHashOnContract(fileHash);

            } catch (error) {
                console.error("Error uploading file to IPFS:", error);
            }
        }

        // Func
